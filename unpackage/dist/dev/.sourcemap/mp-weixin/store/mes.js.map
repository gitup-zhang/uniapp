{"version":3,"file":"mes.js","sources":["store/mes.js"],"sourcesContent":["import { defineStore } from 'pinia'\nimport { ref, computed } from 'vue'\nimport {  getsystemmes, getmesgroup } from '@/new-apis/mes.js'\n\nexport const useMesstore = defineStore('mes', () => {\n\t// 系统消息\n\tconst systemmes = ref([])\n\t// 组内消息\n\tconst groupmes = ref([])\n\t// 加载状态\n\tconst loading = ref(false)\n\t// 下拉刷新状态\n\tconst refreshing = ref(false)\n\t// 加载更多状态\n\tconst loadingMore = ref(false)\n\t// 错误状态\n\tconst error = ref(null)\n\t// 系统或群组的消息列表\n\tconst MessageList = ref([])\n\t// 获取到的信息结构体\n\tconst MseList = ref({\n\t\ttotal: 0,\n\t\tpage: 1,\n\t\tpage_size: 10,\n\t\thas_more: false\n\t})\n\t\n\t// 最后更新时间\n\tconst lastUpdateTime = ref(null)\n\t\n\t// 当前加载的消息类型和参数，用于加载更多\n\tconst currentLoadParams = ref(null)\n\n\t// 辅助函数 - 检查消息是否未读\n\tconst isMessageUnread = (msg) => {\n\t\t// 优先使用 has_unread 字段\n\t\tif (msg.has_unread !== undefined) {\n\t\t\treturn msg.has_unread === 'Y' || msg.has_unread === true\n\t\t}\n\t\t// 兼容旧的 unread_count 字段\n\t\tif (msg.unread_count !== undefined) {\n\t\t\treturn msg.unread_count > 0\n\t\t}\n\t\t// 兼容 is_read 字段\n\t\tif (msg.is_read !== undefined) {\n\t\t\treturn msg.is_read === 0 || msg.is_read === false\n\t\t}\n\t\treturn false\n\t}\n\n\t// 计算属性 - 总未读数量 (改为统计有未读消息的条数)\n\tconst totalUnreadCount = computed(() => {\n\t\tconst systemUnread = systemmes.value.filter(msg => isMessageUnread(msg)).length\n\t\tconst groupUnread = groupmes.value.filter(msg => isMessageUnread(msg)).length\n\t\treturn systemUnread + groupUnread\n\t})\n\n\t// 系统消息未读数量 (改为统计有未读消息的条数)\n\tconst systemUnreadCount = computed(() => {\n\t\tconst count = systemmes.value.filter(msg => isMessageUnread(msg)).length\n\t\tconsole.log(\"系统消息未读数量\", count)\n\t\treturn count\n\t})\n\n\t// 群组消息未读数量 (改为统计有未读消息的条数)\n\tconst groupUnreadCount = computed(() => {\n\t\tconst count = groupmes.value.filter(msg => isMessageUnread(msg)).length\n\t\tconsole.log(\"群组消息未读数量：\", count)\n\t\treturn count\n\t})\n\n\t// 是否还有更多数据\n\tconst hasMoreData = computed(() => {\n\t\tif (!MseList.value.total) return false\n\t\tconst totalPages = Math.ceil(MseList.value.total / MseList.value.page_size)\n\t\treturn MseList.value.page < totalPages\n\t})\n\n\t// 获取系统和群组的消息数据\n\tconst getsystem = async (forceRefresh = false) => {\n\t\t// 如果数据已存在且不是强制刷新，则跳过\n\t\tif (!forceRefresh && systemmes.value.length > 0 && groupmes.value.length > 0) {\n\t\t\tconsole.log('消息数据已存在，跳过加载')\n\t\t\treturn {\n\t\t\t\tsuccess: true,\n\t\t\t\tdata: {\n\t\t\t\t\tsystemMessages: systemmes.value,\n\t\t\t\t\tgroupMessages: groupmes.value\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tloading.value = true\n\t\terror.value = null\n\n\t\ttry {\n\t\t\tconsole.log('开始加载消息数据...')\n\t\t\t\n\t\t\t// 并行获取系统消息和群组消息\n\t\t\tconst [systemRes, groupRes] = await Promise.all([\n\t\t\t\tgetsystemmes({ type_code: \"SYSTEM\" }),\n\t\t\t\tgetsystemmes({ type_code: \"GROUP\" })\n\t\t\t])\n\n\t\t\t// 更新系统消息\n\t\t\tif (systemRes && systemRes.data) {\n\t\t\t\tsystemmes.value = Array.isArray(systemRes.data) ? systemRes.data : []\n\t\t\t\tconsole.log('系统消息加载成功:', systemmes.value.length, '条')\n\t\t\t} else {\n\t\t\t\tsystemmes.value = []\n\t\t\t\tconsole.warn('系统消息数据格式异常')\n\t\t\t}\n\n\t\t\t// 更新群组消息\n\t\t\tif (groupRes && groupRes.data) {\n\t\t\t\tgroupmes.value = Array.isArray(groupRes.data) ? groupRes.data : []\n\t\t\t\tconsole.log('群组消息加载成功:', groupmes.value.length, '条')\n\t\t\t} else {\n\t\t\t\tgroupmes.value = []\n\t\t\t\tconsole.warn('群组消息数据格式异常')\n\t\t\t}\n\n\t\t\t// 更新最后加载时间\n\t\t\tlastUpdateTime.value = new Date().toISOString()\n\t\t\t\n\t\t\treturn {\n\t\t\t\tsuccess: true,\n\t\t\t\tdata: {\n\t\t\t\t\tsystemMessages: systemmes.value,\n\t\t\t\t\tgroupMessages: groupmes.value\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t} catch (err) {\n\t\t\tconsole.error('加载消息失败:', err)\n\t\t\terror.value = err.message || '加载消息失败'\n\t\t\t\n\t\t\t// 如果是网络错误，保持现有数据\n\t\t\tif (err.code !== 'NETWORK_ERROR') {\n\t\t\t\tsystemmes.value = []\n\t\t\t\tgroupmes.value = []\n\t\t\t}\n\t\t\t\n\t\t\tthrow err\n\t\t} finally {\n\t\t\tloading.value = false\n\t\t}\n\t}\n\n\t// 刷新消息数据\n\tconst refreshMessages = async () => {\n\t\treturn await getsystem(true)\n\t}\n\n\t// 获取系统或群组的消息列表（优化分页支持）\n\tconst getMessageList = async (id,params) => {\n\t\tconst { message_type, page = 1, page_size = 10, isRefresh = false, isLoadMore = false, ...otherParams } = params || {}\n\t\t\n\t\ttry {\n\t\t\t// 设置对应的加载状态\n\t\t\tif (isRefresh) {\n\t\t\t\trefreshing.value = true\n\t\t\t} else if (isLoadMore) {\n\t\t\t\tloadingMore.value = true\n\t\t\t} else {\n\t\t\t\tloading.value = true\n\t\t\t}\n\t\t\terror.value = null\n\t\t\t\n\t\t\tconsole.log('加载消息列表参数:', { message_type, page, page_size, isRefresh, isLoadMore, ...otherParams })\n\t\t\t\n\t\t\tconst requestParams = {\n\t\t\t\tmessage_type: message_type,\n\t\t\t\tpage: page,\n\t\t\t\tpage_size: page_size,\n\t\t\t\t...otherParams\n\t\t\t}\n\t\t\t\n\t\t\t// 保存当前加载参数，用于后续加载更多\n\t\t\tif (!isLoadMore) {\n\t\t\t\tcurrentLoadParams.value = { message_type, page_size, ...otherParams }\n\t\t\t}\n\t\t\t\n\t\t\tconst res = await getmesgroup(id,requestParams)\n\t\t\t\n\t\t\tif (!res || !res.data) {\n\t\t\t\tthrow new Error('消息数据格式错误')\n\t\t\t}\n\t\t\t\n\t\t\t// 处理返回的消息数据，添加展开状态\n\t\t\tconst newMessages = Array.isArray(res.data) ? res.data.map(msg => ({\n\t\t\t\t...msg,\n\t\t\t\texpanded: false\n\t\t\t})) : []\n\t\t\t\n\t\t\t// 更新消息结构体信息\n\t\t\tMseList.value = {\n\t\t\t\tpage: res.page || page,\n\t\t\t\ttotal: res.total || 0,\n\t\t\t\tpage_size: res.page_size || page_size,\n\t\t\t\thas_more: hasMoreData.value\n\t\t\t}\n\t\t\t\n\t\t\t// 根据操作类型更新消息列表\n\t\t\tif (isRefresh || page === 1) {\n\t\t\t\t// 刷新或首次加载，替换数据\n\t\t\t\tMessageList.value = newMessages\n\t\t\t\tconsole.log('刷新消息列表完成，共', newMessages.length, '条消息')\n\t\t\t} else if (isLoadMore) {\n\t\t\t\t// 加载更多，追加数据并去重\n\t\t\t\tconst existingIds = new Set(MessageList.value.map(msg => msg.id))\n\t\t\t\tconst uniqueNewMessages = newMessages.filter(msg => !existingIds.has(msg.id))\n\t\t\t\tMessageList.value = [...MessageList.value, ...uniqueNewMessages]\n\t\t\t\tconsole.log('加载更多消息完成，新增', uniqueNewMessages.length, '条消息，总共', MessageList.value.length, '条')\n\t\t\t} else {\n\t\t\t\t// 普通加载，替换数据\n\t\t\t\tMessageList.value = newMessages\n\t\t\t}\n\t\t\t\n\t\t\t// 更新最后加载时间\n\t\t\tlastUpdateTime.value = new Date().toISOString()\n\t\t\t\n\t\t\tconsole.log(\"获得的消息数据\", MessageList.value)\n\t\t\tconsole.log(\"获取到的信息结构体\", MseList.value)\n\t\t\t\n\t\t\treturn {\n\t\t\t\tsuccess: true,\n\t\t\t\tdata: newMessages,\n\t\t\t\tpage: res.page,\n\t\t\t\ttotal: res.total,\n\t\t\t\tpage_size: res.page_size,\n\t\t\t\thas_more: hasMoreData.value\n\t\t\t}\n\t\t\t\n\t\t} catch (err) {\n\t\t\tconsole.error('获取消息列表失败:', err)\n\t\t\terror.value = err.message || '获取消息列表失败'\n\t\t\tthrow err\n\t\t} finally {\n\t\t\t// 清除所有加载状态\n\t\t\tloading.value = false\n\t\t\trefreshing.value = false\n\t\t\tloadingMore.value = false\n\t\t}\n\t}\n\n\t// 加载更多消息（增强版本）\n\tconst loadMoreMessages = async (params) => {\n\t\tconst { message_type, page_size = 10, ...otherParams } = params || {}\n\t\t\n\t\tif (!hasMoreData.value || loadingMore.value) {\n\t\t\tconsole.log('没有更多数据或正在加载中')\n\t\t\treturn { success: false, message: '没有更多数据' }\n\t\t}\n\t\t\n\t\tconst nextPage = MseList.value.page + 1\n\t\t\n\t\t// 合并当前加载参数和新参数\n\t\tconst mergedParams = {\n\t\t\t...currentLoadParams.value,\n\t\t\t...params,\n\t\t\tpage: nextPage,\n\t\t\tpage_size,\n\t\t\tisLoadMore: true\n\t\t}\n\t\t\n\t\treturn await getMessageList(mergedParams)\n\t}\n\n\t// 刷新消息列表（增强版本）\n\tconst refreshMessageList = async (params) => {\n\t\tconst { message_type, page_size = 10, ...otherParams } = params || {}\n\t\t\n\t\t// 重置分页信息\n\t\tMseList.value.page = 1\n\t\t\n\t\tconst mergedParams = {\n\t\t\tmessage_type,\n\t\t\tpage: 1,\n\t\t\tpage_size,\n\t\t\tisRefresh: true,\n\t\t\t...otherParams\n\t\t}\n\t\t\n\t\treturn await getMessageList(mergedParams)\n\t}\n\n\t// 清空消息列表\n\tconst clearMessageList = () => {\n\t\tMessageList.value = []\n\t\tMseList.value = {\n\t\t\ttotal: 0,\n\t\t\tpage: 1,\n\t\t\tpage_size: 10,\n\t\t\thas_more: false\n\t\t}\n\t\tcurrentLoadParams.value = null\n\t\tloading.value = false\n\t\trefreshing.value = false\n\t\tloadingMore.value = false\n\t\terror.value = null\n\t}\n\n\t// 切换消息展开状态\n\tconst toggleMessageExpanded = (messageId) => {\n\t\tconst messageIndex = MessageList.value.findIndex(msg => msg.id === messageId)\n\t\tif (messageIndex !== -1) {\n\t\t\tMessageList.value[messageIndex].expanded = !MessageList.value[messageIndex].expanded\n\t\t\treturn MessageList.value[messageIndex].expanded\n\t\t}\n\t\treturn false\n\t}\n\n\t// 批量切换消息展开状态\n\tconst toggleMultipleExpanded = (messageIds, expanded) => {\n\t\tconst updatedMessages = []\n\t\tmessageIds.forEach(id => {\n\t\t\tconst messageIndex = MessageList.value.findIndex(msg => msg.id === id)\n\t\t\tif (messageIndex !== -1) {\n\t\t\t\tMessageList.value[messageIndex].expanded = expanded\n\t\t\t\tupdatedMessages.push(MessageList.value[messageIndex])\n\t\t\t}\n\t\t})\n\t\treturn updatedMessages\n\t}\n\n\t// 标记系统消息为已读\n\tconst markSystemMessageAsRead = async (messageId) => {\n\t\ttry {\n\t\t\t// 这里应该调用API标记消息为已读\n\t\t\t// await markSystemMessageReadAPI(messageId)\n\t\t\t\n\t\t\t// 更新系统消息列表中的状态\n\t\t\tconst systemMessageIndex = systemmes.value.findIndex(msg => msg.id === messageId)\n\t\t\tif (systemMessageIndex !== -1) {\n\t\t\t\tsystemmes.value[systemMessageIndex].is_read = 1\n\t\t\t\tsystemmes.value[systemMessageIndex].has_unread = 'N'\n\t\t\t\t// 兼容旧字段\n\t\t\t\tif (systemmes.value[systemMessageIndex].unread_count !== undefined) {\n\t\t\t\t\tsystemmes.value[systemMessageIndex].unread_count = 0\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// 更新MessageList中的状态\n\t\t\tconst messageIndex = MessageList.value.findIndex(msg => msg.id === messageId)\n\t\t\tif (messageIndex !== -1) {\n\t\t\t\tMessageList.value[messageIndex].is_read = 1\n\t\t\t\tMessageList.value[messageIndex].has_unread = 'N'\n\t\t\t\tif (MessageList.value[messageIndex].unread_count !== undefined) {\n\t\t\t\t\tMessageList.value[messageIndex].unread_count = 0\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tconsole.log('系统消息已标记为已读:', messageId)\n\t\t\treturn true\n\t\t\t\n\t\t} catch (error) {\n\t\t\tconsole.error('标记系统消息已读失败:', error)\n\t\t\tthrow error\n\t\t}\n\t}\n\n\t// 标记群组消息为已读\n\tconst markGroupMessageAsRead = async (messageId) => {\n\t\ttry {\n\t\t\t// 这里应该调用API标记消息为已读\n\t\t\t// await markGroupMessageReadAPI(messageId)\n\t\t\t\n\t\t\t// 更新群组消息列表中的状态\n\t\t\tconst groupMessageIndex = groupmes.value.findIndex(msg => msg.id === messageId)\n\t\t\tif (groupMessageIndex !== -1) {\n\t\t\t\tgroupmes.value[groupMessageIndex].is_read = 1\n\t\t\t\tgroupmes.value[groupMessageIndex].has_unread = 'N'\n\t\t\t\t// 兼容旧字段\n\t\t\t\tif (groupmes.value[groupMessageIndex].unread_count !== undefined) {\n\t\t\t\t\tgroupmes.value[groupMessageIndex].unread_count = 0\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// 更新MessageList中的状态\n\t\t\tconst messageIndex = MessageList.value.findIndex(msg => msg.id === messageId)\n\t\t\tif (messageIndex !== -1) {\n\t\t\t\tMessageList.value[messageIndex].is_read = 1\n\t\t\t\tMessageList.value[messageIndex].has_unread = 'N'\n\t\t\t\tif (MessageList.value[messageIndex].unread_count !== undefined) {\n\t\t\t\t\tMessageList.value[messageIndex].unread_count = 0\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tconsole.log('群组消息已标记为已读:', messageId)\n\t\t\treturn true\n\t\t\t\n\t\t} catch (error) {\n\t\t\tconsole.error('标记群组消息已读失败:', error)\n\t\t\tthrow error\n\t\t}\n\t}\n\n\t// 批量标记消息为已读\n\tconst markMultipleAsRead = async (messageIds, messageType = 'all') => {\n\t\ttry {\n\t\t\tconst results = []\n\t\t\t\n\t\t\tif (messageType === 'all' || messageType === 'system') {\n\t\t\t\tconst systemIds = messageIds.filter(id => {\n\t\t\t\t\tconst msg = systemmes.value.find(msg => msg.id === id)\n\t\t\t\t\treturn msg && isMessageUnread(msg)\n\t\t\t\t})\n\t\t\t\tfor (const id of systemIds) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst result = await markSystemMessageAsRead(id)\n\t\t\t\t\t\tresults.push({ id, type: 'system', success: result })\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tresults.push({ id, type: 'system', success: false, error })\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (messageType === 'all' || messageType === 'group') {\n\t\t\t\tconst groupIds = messageIds.filter(id => {\n\t\t\t\t\tconst msg = groupmes.value.find(msg => msg.id === id)\n\t\t\t\t\treturn msg && isMessageUnread(msg)\n\t\t\t\t})\n\t\t\t\tfor (const id of groupIds) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst result = await markGroupMessageAsRead(id)\n\t\t\t\t\t\tresults.push({ id, type: 'group', success: result })\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tresults.push({ id, type: 'group', success: false, error })\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tconsole.log('批量标记已读完成:', results)\n\t\t\treturn results\n\t\t} catch (error) {\n\t\t\tconsole.error('批量标记已读失败:', error)\n\t\t\tthrow error\n\t\t}\n\t}\n\n\t// 根据ID获取系统消息\n\tconst getSystemMessageById = (messageId) => {\n\t\treturn systemmes.value.find(msg => msg.id === messageId)\n\t}\n\n\t// 根据ID获取群组消息\n\tconst getGroupMessageById = (messageId) => {\n\t\treturn groupmes.value.find(msg => msg.id === messageId)\n\t}\n\n\t// 根据ID获取消息列表中的消息\n\tconst getMessageById = (messageId) => {\n\t\treturn MessageList.value.find(msg => msg.id === messageId)\n\t}\n\n\t// 获取最新的未读消息\n\tconst getLatestUnreadMessages = (limit = 5) => {\n\t\tconst unreadSystemMessages = systemmes.value\n\t\t\t.filter(msg => isMessageUnread(msg))\n\t\t\t.map(msg => ({ ...msg, type: 'system' }))\n\t\t\n\t\tconst unreadGroupMessages = groupmes.value\n\t\t\t.filter(msg => isMessageUnread(msg))\n\t\t\t.map(msg => ({ ...msg, type: 'group' }))\n\t\t\n\t\tconst allUnread = [...unreadSystemMessages, ...unreadGroupMessages]\n\t\t\t.sort((a, b) => {\n\t\t\t\tconst timeA = new Date(a.created_at || a.updated_at || a.latest_time || a.send_time || 0)\n\t\t\t\tconst timeB = new Date(b.created_at || b.updated_at || b.latest_time || b.send_time || 0)\n\t\t\t\treturn timeB - timeA\n\t\t\t})\n\t\t\n\t\treturn allUnread.slice(0, limit)\n\t}\n\n\t// 清空所有消息数据\n\tconst clearAllMessages = () => {\n\t\tsystemmes.value = []\n\t\tgroupmes.value = []\n\t\tMessageList.value = []\n\t\tMseList.value = {\n\t\t\ttotal: 0,\n\t\t\tpage: 1,\n\t\t\tpage_size: 10,\n\t\t\thas_more: false\n\t\t}\n\t\tcurrentLoadParams.value = null\n\t\terror.value = null\n\t\tlastUpdateTime.value = null\n\t\tloading.value = false\n\t\trefreshing.value = false\n\t\tloadingMore.value = false\n\t\tconsole.log('所有消息数据已清空')\n\t}\n\n\t// 添加新的系统消息（用于实时推送）\n\tconst addSystemMessage = (message) => {\n\t\tif (message && typeof message === 'object') {\n\t\t\t// 检查是否已存在相同ID的消息\n\t\t\tconst existingIndex = systemmes.value.findIndex(msg => msg.id === message.id)\n\t\t\tif (existingIndex !== -1) {\n\t\t\t\t// 更新已存在的消息\n\t\t\t\tsystemmes.value[existingIndex] = { ...systemmes.value[existingIndex], ...message }\n\t\t\t} else {\n\t\t\t\t// 添加新消息到开头\n\t\t\t\tsystemmes.value.unshift(message)\n\t\t\t}\n\t\t\t\n\t\t\t// 如果当前MessageList显示的是系统消息，也要更新\n\t\t\tif (MessageList.value.length > 0 && MessageList.value[0].message_type === 'SYSTEM') {\n\t\t\t\tconst messageListIndex = MessageList.value.findIndex(msg => msg.id === message.id)\n\t\t\t\tif (messageListIndex !== -1) {\n\t\t\t\t\tMessageList.value[messageListIndex] = { \n\t\t\t\t\t\t...MessageList.value[messageListIndex], \n\t\t\t\t\t\t...message,\n\t\t\t\t\t\texpanded: MessageList.value[messageListIndex].expanded\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tMessageList.value.unshift({\n\t\t\t\t\t\t...message,\n\t\t\t\t\t\texpanded: false\n\t\t\t\t\t})\n\t\t\t\t\t// 更新总数\n\t\t\t\t\tMseList.value.total += 1\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tconsole.log('新增/更新系统消息:', message.title || message.id)\n\t\t}\n\t}\n\n\t// 添加新的群组消息（用于实时推送）\n\tconst addGroupMessage = (message) => {\n\t\tif (message && typeof message === 'object') {\n\t\t\tconst existingIndex = groupmes.value.findIndex(msg => \n\t\t\t\tmsg.group_name === message.group_name || msg.id === message.id\n\t\t\t)\n\t\t\t\n\t\t\tif (existingIndex !== -1) {\n\t\t\t\t// 更新已存在的群组消息\n\t\t\t\tgroupmes.value[existingIndex] = { ...groupmes.value[existingIndex], ...message }\n\t\t\t} else {\n\t\t\t\t// 添加新的群组消息\n\t\t\t\tgroupmes.value.unshift(message)\n\t\t\t}\n\t\t\t\n\t\t\t// 如果当前MessageList显示的是群组消息，也要更新\n\t\t\tif (MessageList.value.length > 0 && MessageList.value[0].message_type === 'GROUP') {\n\t\t\t\tconst messageListIndex = MessageList.value.findIndex(msg => msg.id === message.id)\n\t\t\t\tif (messageListIndex !== -1) {\n\t\t\t\t\tMessageList.value[messageListIndex] = { \n\t\t\t\t\t\t...MessageList.value[messageListIndex], \n\t\t\t\t\t\t...message,\n\t\t\t\t\t\texpanded: MessageList.value[messageListIndex].expanded\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tMessageList.value.unshift({\n\t\t\t\t\t\t...message,\n\t\t\t\t\t\texpanded: false\n\t\t\t\t\t})\n\t\t\t\t\t// 更新总数\n\t\t\t\t\tMseList.value.total += 1\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tconsole.log('新增/更新群组消息:', message.group_name || message.id)\n\t\t}\n\t}\n\n\t// 更新消息的未读状态 (修改为使用 has_unread 字段)\n\tconst updateMessageUnreadStatus = (messageId, messageType, hasUnread) => {\n\t\tconst unreadValue = hasUnread ? 'Y' : 'N'\n\t\tconst isReadValue = hasUnread ? 0 : 1\n\t\t\n\t\tif (messageType === 'system') {\n\t\t\tconst messageIndex = systemmes.value.findIndex(msg => msg.id === messageId)\n\t\t\tif (messageIndex !== -1) {\n\t\t\t\tsystemmes.value[messageIndex].has_unread = unreadValue\n\t\t\t\tsystemmes.value[messageIndex].is_read = isReadValue\n\t\t\t\t// 兼容旧字段\n\t\t\t\tif (systemmes.value[messageIndex].unread_count !== undefined) {\n\t\t\t\t\tsystemmes.value[messageIndex].unread_count = hasUnread ? 1 : 0\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (messageType === 'group') {\n\t\t\tconst messageIndex = groupmes.value.findIndex(msg => msg.id === messageId)\n\t\t\tif (messageIndex !== -1) {\n\t\t\t\tgroupmes.value[messageIndex].has_unread = unreadValue\n\t\t\t\tgroupmes.value[messageIndex].is_read = isReadValue\n\t\t\t\t// 兼容旧字段\n\t\t\t\tif (groupmes.value[messageIndex].unread_count !== undefined) {\n\t\t\t\t\tgroupmes.value[messageIndex].unread_count = hasUnread ? 1 : 0\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t// 同时更新MessageList中的数据\n\t\tconst listMessageIndex = MessageList.value.findIndex(msg => msg.id === messageId)\n\t\tif (listMessageIndex !== -1) {\n\t\t\tMessageList.value[listMessageIndex].has_unread = unreadValue\n\t\t\tMessageList.value[listMessageIndex].is_read = isReadValue\n\t\t\t// 兼容旧字段\n\t\t\tif (MessageList.value[listMessageIndex].unread_count !== undefined) {\n\t\t\t\tMessageList.value[listMessageIndex].unread_count = hasUnread ? 1 : 0\n\t\t\t}\n\t\t}\n\t}\n\n\t// 保留旧方法名以兼容现有代码\n\tconst updateMessageUnreadCount = (messageId, messageType, unreadCount) => {\n\t\tupdateMessageUnreadStatus(messageId, messageType, unreadCount > 0)\n\t}\n\n\t// 检查是否有新消息（可用于轮询）\n\tconst hasNewMessages = computed(() => {\n\t\treturn totalUnreadCount.value > 0\n\t})\n\n\t// 获取数据状态信息\n\tconst getDataStatus = () => {\n\t\treturn {\n\t\t\tloading: loading.value,\n\t\t\trefreshing: refreshing.value,\n\t\t\tloadingMore: loadingMore.value,\n\t\t\terror: error.value,\n\t\t\tlastUpdateTime: lastUpdateTime.value,\n\t\t\tsystemMessageCount: systemmes.value.length,\n\t\t\tgroupMessageCount: groupmes.value.length,\n\t\t\tmessageListCount: MessageList.value.length,\n\t\t\ttotalUnreadCount: totalUnreadCount.value,\n\t\t\tsystemUnreadCount: systemUnreadCount.value,\n\t\t\tgroupUnreadCount: groupUnreadCount.value,\n\t\t\thasData: systemmes.value.length > 0 || groupmes.value.length > 0,\n\t\t\thasMoreData: hasMoreData.value,\n\t\t\tpagination: MseList.value,\n\t\t\tcurrentLoadParams: currentLoadParams.value\n\t\t}\n\t}\n\n\t// 搜索消息\n\tconst searchMessages = (keyword, messageType = 'all') => {\n\t\tif (!keyword) return []\n\t\t\n\t\tconst searchIn = (messages) => {\n\t\t\treturn messages.filter(msg => \n\t\t\t\t(msg.title && msg.title.includes(keyword)) ||\n\t\t\t\t(msg.content && msg.content.includes(keyword)) ||\n\t\t\t\t(msg.group_name && msg.group_name.includes(keyword)) ||\n\t\t\t\t(msg.sender_name && msg.sender_name.includes(keyword))\n\t\t\t)\n\t\t}\n\t\t\n\t\tlet results = []\n\t\tif (messageType === 'all' || messageType === 'system') {\n\t\t\tresults.push(...searchIn(systemmes.value).map(msg => ({ ...msg, type: 'system' })))\n\t\t}\n\t\tif (messageType === 'all' || messageType === 'group') {\n\t\t\tresults.push(...searchIn(groupmes.value).map(msg => ({ ...msg, type: 'group' })))\n\t\t}\n\t\tif (messageType === 'current') {\n\t\t\tresults.push(...searchIn(MessageList.value).map(msg => ({ ...msg, type: 'current' })))\n\t\t}\n\t\t\n\t\treturn results.sort((a, b) => {\n\t\t\tconst timeA = new Date(a.created_at || a.updated_at || a.latest_time || a.send_time || 0)\n\t\t\tconst timeB = new Date(b.created_at || b.updated_at || b.latest_time || b.send_time || 0)\n\t\t\treturn timeB - timeA\n\t\t})\n\t}\n\n\t// 重置加载状态（用于错误恢复）\n\tconst resetLoadingStates = () => {\n\t\tloading.value = false\n\t\trefreshing.value = false\n\t\tloadingMore.value = false\n\t\terror.value = null\n\t}\n\n\t// 检查数据一致性\n\tconst validateDataConsistency = () => {\n\t\tconst issues = []\n\t\t\n\t\t// 检查分页信息\n\t\tif (MseList.value.page < 1) {\n\t\t\tissues.push('页码不能小于1')\n\t\t}\n\t\t\n\t\tif (MseList.value.page_size < 1) {\n\t\t\tissues.push('页面大小不能小于1')\n\t\t}\n\t\t\n\t\tif (MseList.value.total < 0) {\n\t\t\tissues.push('总数不能为负数')\n\t\t}\n\t\t\n\t\t// 检查消息列表\n\t\tconst duplicateIds = MessageList.value\n\t\t\t.map(msg => msg.id)\n\t\t\t.filter((id, index, arr) => arr.indexOf(id) !== index)\n\t\t\n\t\tif (duplicateIds.length > 0) {\n\t\t\tissues.push(`发现重复的消息ID: ${duplicateIds.join(', ')}`)\n\t\t}\n\t\t\n\t\treturn {\n\t\t\tisValid: issues.length === 0,\n\t\t\tissues\n\t\t}\n\t}\n\n\treturn {\n\t\t// 状态数据\n\t\tsystemmes,\n\t\tgroupmes,\n\t\tloading,\n\t\trefreshing,\n\t\tloadingMore,\n\t\terror,\n\t\tlastUpdateTime,\n\t\tMessageList,\n\t\tMseList,\n\t\tcurrentLoadParams,\n\t\t\n\t\t// 计算属性\n\t\ttotalUnreadCount,\n\t\tsystemUnreadCount,\n\t\tgroupUnreadCount,\n\t\thasNewMessages,\n\t\thasMoreData,\n\t\t\n\t\t// 工具函数\n\t\tisMessageUnread,\n\t\t\n\t\t// 方法\n\t\tgetsystem,\n\t\trefreshMessages,\n\t\tgetMessageList,\n\t\tloadMoreMessages,\n\t\trefreshMessageList,\n\t\tclearMessageList,\n\t\ttoggleMessageExpanded,\n\t\ttoggleMultipleExpanded,\n\t\tmarkSystemMessageAsRead,\n\t\tmarkGroupMessageAsRead,\n\t\tmarkMultipleAsRead,\n\t\tgetSystemMessageById,\n\t\tgetGroupMessageById,\n\t\tgetMessageById,\n\t\tgetLatestUnreadMessages,\n\t\tclearAllMessages,\n\t\taddSystemMessage,\n\t\taddGroupMessage,\n\t\tupdateMessageUnreadStatus,\n\t\tupdateMessageUnreadCount, // 保留兼容性\n\t\tgetDataStatus,\n\t\tsearchMessages,\n\t\tresetLoadingStates,\n\t\tvalidateDataConsistency\n\t}\n})"],"names":["defineStore","ref","computed","uni","getsystemmes","getmesgroup","error","msg"],"mappings":"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"}