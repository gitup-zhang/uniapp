{"version":3,"file":"Articles.js","sources":["store/Articles.js"],"sourcesContent":["import { defineStore } from 'pinia'\nimport { ref } from 'vue'\nimport {getArticleList} from '@/new-apis/articles.js'\n\nexport const useArticlesStore=defineStore('articlelist',()=>{\n\t// 获取到的政策列表\n\tconst listpolicy=ref([])\n\tconst page=ref(1)\n\t// 获取到的新闻列表\n\tconst listnew=ref([])\n\tconst pagenew=ref(1)\n\t\n\t// 加载状态\n\tconst loading = ref(false)\n\tconst hasMore = ref(true)\n\t// 首次加载状态\n\tconst initialLoading = ref(false)\n\n\t// 获取政策列表\n\tconst getlistpolicy=async(params)=>{\n\t\tlet signal = params.article_type; \n\n\t\tloading.value = false\n\t\thasMore.value = true\n\t\t\n\t\t// 只在非刷新状态下显示loading\n\t\tif (!params.isRefresh) {\n\t\t\tuni.showLoading({\n\t\t\t\ttitle: '加载中...',\n\t\t\t\tmask: true\n\t\t\t})\n\t\t}\n\t\t\n\t\ttry{\n\t\t\tconst res = await getArticleList(params)\n\t\t\tpage.value = res.page\n\t\t\t\n\t\t\t// 计算是否还有更多数据\n\t\t\tif(res.page * res.page_size < res.total){\n\t\t\t\thasMore.value = true\n\t\t\t} else {\n\t\t\t\thasMore.value = false\n\t\t\t}\n\t\t\t\n\t\t\t// 根据文章类型分别处理数据\n\t\t\tif(signal === \"POLICY\"){\n\t\t\t\tlistpolicy.value = res.data || []\n\t\t\t} else {\n\t\t\t\tlistnew.value = res.data || []\n\t\t\t}\n\t\t\t\n\t\t\t// 如果是第一页且没有数据，显示空状态\n\t\t\tif (res.page === 1 && (!res.data || res.data.length === 0)) {\n\t\t\t\tconsole.log('当前列表为空')\n\t\t\t}\n\t\t\t\n\t\t} catch(error) {\n\t\t\tconsole.error('获取文章列表失败:', error)\n\t\t\t\n\t\t\t// 网络错误处理\n\t\t\tconst errorMessage = getErrorMessage(error)\n\t\t\tuni.showToast({\n\t\t\t\ttitle: errorMessage,\n\t\t\t\ticon: 'none',\n\t\t\t\tduration: 2000\n\t\t\t})\n\t\t\t\n\t\t\t// 错误时重置状态\n\t\t\tif(signal === \"POLICY\"){\n\t\t\t\tlistpolicy.value = []\n\t\t\t} else {\n\t\t\t\tlistnew.value = []\n\t\t\t}\n\t\t\thasMore.value = false\n\t\t\t\n\t\t} finally {\n\t\t\tif (!params.isRefresh) {\n\t\t\t\tuni.hideLoading()\n\t\t\t}\n\t\t}\n\t}\n\n\t// 加载更多文章\n\tconst getarticlemore=async(params)=>{\n\t\tlet signal = params.article_type; \n\t\t\n\t\t// 如果正在加载或没有更多数据，直接返回\n\t\tif(loading.value || !hasMore.value) {\n\t\t\tconsole.log('加载更多被阻止:', { loading: loading.value, hasMore: hasMore.value })\n\t\t\treturn\n\t\t}\n\t\t\n\t\ttry{\n\t\t\tloading.value = true \n\t\t\t\n\t\t\tconst res = await getArticleList(params)\n\t\t\tpage.value = res.page\n\t\t\t\n\t\t\t// 计算是否还有更多数据\n\t\t\tif(res.page * res.page_size < res.total){\n\t\t\t\thasMore.value = true\n\t\t\t} else {\n\t\t\t\thasMore.value = false\n\t\t\t}\n\t\t\t\n\t\t\t// 拼接新数据\n\t\t\tif(res.data && res.data.length > 0) {\n\t\t\t\tif(signal === \"POLICY\"){\n\t\t\t\t\tlistpolicy.value = [...listpolicy.value, ...res.data]\n\t\t\t\t} else {\n\t\t\t\t\tlistnew.value = [...listnew.value, ...res.data]\n\t\t\t\t}\n\t\t\t\tconsole.log(`成功加载更多 ${res.data.length} 条数据`)\n\t\t\t} else {\n\t\t\t\t// 如果返回的数据为空，设置没有更多\n\t\t\t\thasMore.value = false\n\t\t\t\tconsole.log('服务器返回空数据，设置hasMore为false')\n\t\t\t}\n\t\t\t\n\t\t} catch(error) {\n\t\t\tconsole.error('加载更多失败:', error)\n\t\t\t\n\t\t\tconst errorMessage = getErrorMessage(error)\n\t\t\tuni.showToast({\n\t\t\t\ttitle: errorMessage,\n\t\t\t\ticon: 'none',\n\t\t\t\tduration: 2000\n\t\t\t})\n\t\t\t\n\t\t\t// 错误时不改变hasMore状态，允许用户重试\n\t\t} finally {\n\t\t\tloading.value = false\n\t\t}\n\t}\n\n\t// 错误信息处理\n\tconst getErrorMessage = (error) => {\n\t\tif (!error) return '未知错误'\n\t\t\n\t\t// 网络错误\n\t\tif (error.errMsg && error.errMsg.includes('request:fail')) {\n\t\t\treturn '网络连接失败，请检查网络'\n\t\t}\n\t\t\n\t\t// 超时错误\n\t\tif (error.errMsg && error.errMsg.includes('timeout')) {\n\t\t\treturn '请求超时，请重试'\n\t\t}\n\t\t\n\t\t// 服务器错误\n\t\tif (error.statusCode) {\n\t\t\tswitch (error.statusCode) {\n\t\t\t\tcase 400:\n\t\t\t\t\treturn '请求参数错误'\n\t\t\t\tcase 401:\n\t\t\t\t\treturn '未授权访问'\n\t\t\t\tcase 403:\n\t\t\t\t\treturn '访问被拒绝'\n\t\t\t\tcase 404:\n\t\t\t\t\treturn '请求的资源不存在'\n\t\t\t\tcase 500:\n\t\t\t\t\treturn '服务器内部错误'\n\t\t\t\tcase 502:\n\t\t\t\t\treturn '网关错误'\n\t\t\t\tcase 503:\n\t\t\t\t\treturn '服务暂不可用'\n\t\t\t\tdefault:\n\t\t\t\t\treturn `服务器错误 (${error.statusCode})`\n\t\t\t}\n\t\t}\n\t\t\n\t\t// 其他错误\n\t\treturn error.message || '请求失败，请重试'\n\t}\n\n\t// 重置page页码和加载状态\n\tfunction resetpage(num){\n\t\tpage.value = num\n\t\tloading.value = false\n\t\thasMore.value = true\n\t}\n\n\t// 重置所有状态\n\tfunction resetAllState() {\n\t\tlistpolicy.value = []\n\t\tlistnew.value = []\n\t\tpage.value = 1\n\t\tpagenew.value = 1\n\t\tloading.value = false\n\t\thasMore.value = true\n\t\tinitialLoading.value = false\n\t}\n\n\t// 清空指定类型的列表\n\tfunction clearList(type) {\n\t\tif (type === 'policy') {\n\t\t\tlistpolicy.value = []\n\t\t} else if (type === 'news') {\n\t\t\tlistnew.value = []\n\t\t}\n\t\tpage.value = 1\n\t\tloading.value = false\n\t\thasMore.value = true\n\t}\n\n\t// 获取当前列表状态\n\tfunction getListStatus(type) {\n\t\tconst list = type === 'policy' ? listpolicy.value : listnew.value\n\t\treturn {\n\t\t\tisEmpty: list.length === 0,\n\t\t\tcount: list.length,\n\t\t\tisLoading: loading.value,\n\t\t\thasMore: hasMore.value,\n\t\t\tcurrentPage: page.value\n\t\t}\n\t}\n\n\t// 刷新列表（下拉刷新使用）\n\tasync function refreshList(params) {\n\t\tconst refreshParams = { ...params, isRefresh: true, page: 1 }\n\t\tpage.value = 1\n\t\tloading.value = false\n\t\thasMore.value = true\n\t\t\n\t\ttry {\n\t\t\tawait getlistpolicy(refreshParams)\n\t\t} catch (error) {\n\t\t\tconsole.error('刷新列表失败:', error)\n\t\t\tthrow error\n\t\t}\n\t}\n\t\n\treturn {\n\t\t// 数据\n\t\tlistpolicy,\n\t\tlistnew,\n\t\tpage,\n\t\tpagenew,\n\t\tloading,\n\t\thasMore,\n\t\tinitialLoading,\n\t\t\n\t\t// 方法\n\t\tgetlistpolicy,\n\t\tgetarticlemore,\n\t\tresetpage,\n\t\tresetAllState,\n\t\tclearList,\n\t\tgetListStatus,\n\t\trefreshList,\n\t\tgetErrorMessage\n\t}\r\n\t\t})"],"names":["defineStore","ref","uni","getArticleList"],"mappings":"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"}